#!/bin/bash
set -e # Exit with nonzero exit code if anything fails

SOURCE_BRANCH="master"
TARGET_BRANCH="gh-pages"

function doCompile {
  #./compile.sh
  echo "copy contents of _site/ to out/"
  cp -rf _site/* out
}

# Pull requests and commits to other branches shouldn't try to deploy, just build to verify
#if [ "$TRAVIS_PULL_REQUEST" != "false" -o "$TRAVIS_BRANCH" != "$SOURCE_BRANCH" ]; then
#    echo "Skipping deploy; just doing a build."
    #doCompile
#    exit 0
#fi

echo "Initiating deployment..."

# Save some useful information
REPO=`git config remote.origin.url`
SSH_REPO=${REPO/https:\/\/github.com\//git@github.com:}
SHA=`git rev-parse --verify HEAD`

echo "ssh repo: $SSH_REPO"

# Clone the existing gh-pages for this repo into out/
# Create a new empty branch if gh-pages doesn't exist yet (should only happen on first deply)
git clone $REPO out
cd out
git checkout $TARGET_BRANCH || git checkout --orphan $TARGET_BRANCH
cd ..

# Clean out existing contents
rm -rf out/**/* || exit 0

# Run our compile script
doCompile

# Now let's go have some fun with the cloned repo
cd out
git config user.name "Travis CI"
git config user.email "$COMMIT_AUTHOR_EMAIL"

# Remove files we don't want in the deployment branch
# Certain files confuse gh-pages, which still tries to run Jekyll
rm -f Gemfile*
rm -f package.json
rm -f deploy_key*
rm -f README.md
rm -f .gitignore
rm -f _config.yml
rm -f Procfile
rm -f .travis.yml
rm -f .editorconfig
rm -f *.sass
echo "Generated from `master` branch (Last updated: $(date "+%Y-%m-%d at %H:%M:%S %Z"))" > README.md
  
# If there are no changes to the compiled out (e.g. this is a README update) then just bail.
#if git diff --quiet; then
#    echo "No changes to the output on this push; exiting."
#    exit 0
#fi

# Commit the "changes", i.e. the new version.
# The delta will show diffs between new and old versions.
git add -A .
git status
git commit -m "Deploy to GitHub Pages: ${SHA}"

# Get the deploy key by using Travis's stored variables to decrypt deploy_key.enc
ENCRYPTED_KEY_VAR="encrypted_${ENCRYPTION_LABEL}_key"
ENCRYPTED_IV_VAR="encrypted_${ENCRYPTION_LABEL}_iv"
ENCRYPTED_KEY=${!ENCRYPTED_KEY_VAR}
ENCRYPTED_IV=${!ENCRYPTED_IV_VAR}

openssl aes-256-cbc -K "$ENCRYPTED_KEY" -iv "$ENCRYPTED_IV" -in ../deploy_key.enc -out ../deploy_key -d
chmod 600 ../deploy_key
eval `ssh-agent -s`
ssh-add ../deploy_key

# Now that we're all set up, we can push.
echo "Pushing to $SSH_REPO $TARGET_BRANCH"
git push $SSH_REPO $TARGET_BRANCH
   
#ref: https://gist.github.com/domenic/ec8b0fc8ab45f39403dd
